call GenerateFactura("2023-09-01", @cantidadFacturasEmitidas, @importeTotalFacturas); -- en "2023-06-01" ir√≠a una variable que recibe el periodo ingresado en la pagina web
-- Select @cantidadFacturasEmitidas as 'Cantidad de Facturas Emitidas', @importeTotalFacturas as 'Importe Total de las Facturas Emitidas'; -- este es para ver cuantas facturas se emitieron y el importe total de todas las facturas emitidas

-- CREAMOS EL PROCEDIMIENTO DE GENERAR LAS FACTURAS
DELIMITER $$
DROP PROCEDURE IF EXISTS GenerateFactura $$
CREATE PROCEDURE GenerateFactura(in periodoAFacturar Date, out cont int, out importeTotal float)
begin
DECLARE listo BOOLEAN DEFAULT FALSE;
DECLARE periodo_cursor date;
DECLARE idcuenta_cursor int;
DECLARE lectura_cursor float;
DECLARE totalAPagarFactura float;
DECLARE aux int;
DECLARE mediciones_sin_facturar CURSOR FOR SELECT periodo, Cuenta_idCuenta, lectura from Mediciones m where not exists (select periodo, Cuenta_idCuenta from Factura f where m.periodo = f.mediciones_periodo and m.Cuenta_idCuenta = f.cuenta_idCuenta) and periodo <= periodoAFacturar order by periodo asc;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET listo = TRUE;
select '0' into cont;
select '0' into importeTotal;
	Open mediciones_sin_facturar;
		med_sin_fac_loop: LOOP
			fetch mediciones_sin_facturar into periodo_cursor, idcuenta_cursor, lectura_cursor;
            IF listo THEN 
				LEAVE med_sin_fac_loop;
            else
				select count(*) into aux FROM ConceptoxCuenta where Cuenta_idCuenta = idcuenta_cursor;
                if aux > 0 then
					START TRANSACTION;
					select calcularTotalAPagar(idcuenta_cursor, calcularCostoConsumo(obtenerConsumo(idcuenta_cursor, periodo_cursor, lectura_cursor))) into totalAPagarFactura;
					INSERT INTO `Factura` (`fechaEmision`, `consumo`, `totalPagar`, `mediciones_periodo`, `cuenta_idCuenta`) VALUE (CURRENT_TIMESTAMP, obtenerConsumo(idcuenta_cursor, periodo_cursor, lectura_cursor), totalAPagarFactura, periodo_cursor, idcuenta_cursor);
                    select cont + 1 into cont;
                    select importeTotal + totalAPagarFactura into importeTotal;
                    call InsertDetalleFactura(periodo_cursor, idcuenta_cursor, lectura_cursor, (Select idFactura From Factura where mediciones_periodo = periodo_cursor and cuenta_idCuenta = idcuenta_cursor));
					COMMIT;
                END IF;
            END IF;
		End LOOP med_sin_fac_loop;
	Close mediciones_sin_facturar;
END;
$$ DELIMITER ;

-- CREAMOS UN PROCEDIMIENTO PARA INSERTAR LOS DETALLES DE UNA FACTURA
DELIMITER $$
DROP PROCEDURE IF EXISTS InsertDetalleFactura $$
CREATE PROCEDURE InsertDetalleFactura(in periodo_cursor date, in idcuenta_cursor int, in lectura_cursor float, in idFactura int)
begin
DECLARE listo_loop2 BOOLEAN DEFAULT FALSE;
DECLARE idCuentaxConcepto_cursor int;
DECLARE idConcepto_cursor int;
DECLARE valor_cursor float;
DECLARE concepto_x_cuenta CURSOR FOR SELECT Cuenta_idCuenta, Concepto_idConcepto, valor From conceptoxcuenta where Cuenta_idCuenta = idcuenta_cursor order by Concepto_idConcepto asc;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET listo_loop2 = TRUE;
Open concepto_x_cuenta;
	concepto_x_cuenta_loop: LOOP
	fetch concepto_x_cuenta into idCuentaxConcepto_cursor, idConcepto_cursor, valor_cursor;
	IF listo_loop2 THEN 
		LEAVE concepto_x_cuenta_loop;
	else
		if idConcepto_cursor = 1 then
			INSERT INTO `facturadetalle` (`costoUnitario`, `Cuenta_has_Concepto_Cuenta_idCuenta`, `Cuenta_has_Concepto_Concepto_idConcepto`, `idFactura`) VALUE (calcularCostoConsumo(obtenerConsumo(idcuenta_cursor, periodo_cursor, lectura_cursor)), idCuentaxConcepto_cursor, idConcepto_cursor, idFactura);
		else
			INSERT INTO `facturadetalle` (`costoUnitario`, `Cuenta_has_Concepto_Cuenta_idCuenta`, `Cuenta_has_Concepto_Concepto_idConcepto`, `idFactura`) VALUE (valor_cursor, idCuentaxConcepto_cursor, idConcepto_cursor, idFactura);
		end if;
	END IF;
	End LOOP concepto_x_cuenta_loop;
	Close concepto_x_cuenta;
END;
$$ DELIMITER ;


-- CREAMOS UNA FUNCION QUE DEVUELVE EL CONSUMO ACTUAL A PARTIR DE UN IDCUENTA Y UNA LECTURAACTUAL
DELIMITER $$
DROP FUNCTION IF EXISTS obtenerConsumo $$
CREATE FUNCTION obtenerConsumo(idCuenta Int, periodoAct date, lecturaActual float) RETURNS Float DETERMINISTIC
Begin
	DECLARE lectAnt Float;
    DECLARE consumo Float;
    declare periodoAnt date;
    select periodoAnterior(idCuenta, periodoAct) into periodoAnt;
    if (periodoAnt = periodoAct) then
		select lecturaActual into consumo;
    else
        SELECT max(lectura) INTO lectAnt FROM mediciones WHERE Cuenta_idCuenta = idCuenta and periodo = periodoAnt GROUP BY Cuenta_idCuenta;
        select lecturaActual - lectAnt into consumo;
	end if;
Return consumo;
End;
$$ DELIMITER ;

-- CREAMOS UNA FUNCION QUE DEVUELVE EL PERIODO ANTERIOR DE UNA MEDICION DADO UN IDCUENTA
DELIMITER $$
DROP FUNCTION IF EXISTS periodoAnterior $$
CREATE FUNCTION periodoAnterior(idCuenta Int, periodoActual date) RETURNS Date DETERMINISTIC
Begin
	DECLARE perAnt Date;
    if periodoActual = (SELECT min(periodo) FROM mediciones WHERE Cuenta_idCuenta = idCuenta GROUP BY Cuenta_idCuenta) then
		Select periodoActual into perAnt;
    else
		SELECT max(periodo) INTO perAnt FROM mediciones WHERE Cuenta_idCuenta = idCuenta AND periodo < periodoActual GROUP BY Cuenta_idCuenta;
    end if;
Return perAnt;
End;
$$ DELIMITER ;

-- CREAMOS UNA FUNCION PARA CALCULAR LOS COSTOS DE LOS CONSUMOS
DELIMITER $$
DROP FUNCTION IF EXISTS calcularCostoConsumo $$
CREATE FUNCTION calcularCostoConsumo(consumo float) RETURNS Float DETERMINISTIC
Begin
	declare costoConsumo float;
    declare cons_aux float;
	if consumo <= (select mtsDesde FROM costo where idCosto = 2)  then
		Select valorMetro into costoConsumo from Costo where idCosto = 1; 
    else
		if consumo > (select mtsDesde FROM costo where idCosto = 2) AND consumo <= (select mtsHasta FROM costo where idCosto = 2) then
            Select valorMetro  into costoConsumo from Costo where idCosto = 1;
            select consumo - 15 into cons_aux;
            Select costoConsumo + valorMetro * cons_aux into costoConsumo from Costo where idCosto = 2; 
		else
			if consumo > (select mtsDesde FROM costo where idCosto = 3) AND consumo <= (select mtsHasta FROM costo where idCosto = 3) then
				Select valorMetro  into costoConsumo from Costo where idCosto = 1;
				select consumo - 15 into cons_aux;
				Select costoConsumo + valorMetro * 5 into costoConsumo from Costo where idCosto = 2;
                select cons_aux - 5 into cons_aux;
                Select costoConsumo + valorMetro * cons_aux into costoConsumo from Costo where idCosto = 3;
            else
				Select valorMetro  into costoConsumo from Costo where idCosto = 1;
                select consumo - 15 into cons_aux;
				Select costoConsumo + valorMetro * 5 into costoConsumo from Costo where idCosto = 2;
                select cons_aux - 5 into cons_aux;
                Select costoConsumo + valorMetro * 10 into costoConsumo from Costo where idCosto = 3;
                select cons_aux - 10 into cons_aux;
                Select costoConsumo + valorMetro * cons_aux into costoConsumo from Costo where idCosto = 4;
            end if;
        end if;
    end if;
Return costoConsumo;
End;
$$ DELIMITER ;

-- CREAMOS UNA FUNCION QUE DEVUELVE EL TOTAL A PAGAR DE UNA FACTURA EN PARTICULAR
DELIMITER $$
DROP FUNCTION IF EXISTS calcularTotalAPagar $$
CREATE FUNCTION calcularTotalAPagar(idCuenta INT, costoConsumo FLOAT) RETURNS FLOAT DETERMINISTIC
Begin
	DECLARE costoTotal FLOAT;
    Select sum(valor) Into costoTotal FROM conceptoxcuenta Where idCuenta = Cuenta_idCuenta group by Cuenta_idCuenta;
    Select costoTotal + costoConsumo into costoTotal;
Return costoTotal;
End;
$$ DELIMITER ;