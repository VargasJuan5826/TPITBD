-- ----------------------------CONCEPTO----------------------------

CREATE TABLE `tpi`.`Concepto_log` (
  `idLog` INT NOT NULL AUTO_INCREMENT,
  `idConcepto`INT NOT NULL,
  `nombreConcepto` VARCHAR(20) NOT NULL,
  `usuario` VARCHAR(200) NOT NULL,
  `operacion` VARCHAR(50) NOT NULL,
  `fechaRealizacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idLog`));

-- CREAMOS UN TRIGGER PARA LAS ACTUALIZACIONES QUE SE REALICEN EN CONCEPTO
DELIMITER $$
CREATE TRIGGER concepto_update BEFORE UPDATE ON concepto FOR EACH ROW
BEGIN
	INSERT INTO Concepto_log(idConcepto, nombreConcepto, usuario, operacion) VALUES(OLD.idConcepto, OLD.nombreConcepto, USER(),'UPDATE BEFORE');
	INSERT INTO Concepto_log(idConcepto, nombreConcepto, usuario, operacion) VALUE(NEW.idConcepto, NEW.nombreConcepto, USER(), 'UPDATE AFTER');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS NUEVOS CONCEPTOS QUE SE INSERTEN EN CONCEPTO
DELIMITER $$
CREATE TRIGGER concepto_insert AFTER INSERT ON concepto FOR EACH ROW
BEGIN
	INSERT INTO Concepto_log(idConcepto, nombreConcepto, usuario, operacion) VALUE(NEW.idConcepto, NEW.nombreConcepto, USER(), 'INSERT');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS CONCEPTOS QUE SE ELIMENEN EN CONCEPTO
DELIMITER $$
CREATE TRIGGER concepto_delete BEFORE DELETE ON concepto FOR EACH ROW
BEGIN
	INSERT INTO Concepto_log(idConcepto, nombreConcepto, usuario, operacion) VALUE(OLD.idConcepto, OLD.nombreConcepto, USER(), 'DELETE');
END;
$$ DELIMITER ;

-- ----------------------------MEDICIONES----------------------------

CREATE TABLE `tpi`.`Mediciones_log` (
  `idLog` INT NOT NULL AUTO_INCREMENT,
  `periodo`DATE NOT NULL,
  `fechaLectura` DATETIME NOT NULL,
  `lectura` FLOAT NOT NULL,
  `Cuenta_idCuenta` INT NOT NULL,
  `usuario` VARCHAR(200) NOT NULL,
  `operacion` VARCHAR(50) NOT NULL,
  `fechaRealizacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idLog`));

-- CREAMOS UN TRIGGER PARA LAS ACTUALIZACIONES QUE SE REALICEN EN MEDICIONES
DELIMITER $$
CREATE TRIGGER mediciones_update BEFORE UPDATE ON mediciones FOR EACH ROW
BEGIN
	INSERT INTO Mediciones_log(periodo, fechaLectura, lectura, Cuenta_idCuenta, usuario, operacion) VALUES(OLD.periodo, OLD.fechaLectura, OLD.lectura, OLD.Cuenta_idCuenta, USER(),'UPDATE BEFORE');
	INSERT INTO Mediciones_log(periodo, fechaLectura, lectura, Cuenta_idCuenta, usuario, operacion) VALUE(NEW.periodo, NEW.fechaLectura, NEW.lectura, NEW.Cuenta_idCuenta, USER(), 'UPDATE AFTER');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LAS NUEVAS MEDICIONES QUE SE INSERTEN EN MEDICIONES
DELIMITER $$
CREATE TRIGGER mediciones_insert AFTER INSERT ON mediciones FOR EACH ROW
BEGIN
	INSERT INTO Mediciones_log(periodo, fechaLectura, lectura, Cuenta_idCuenta, usuario, operacion) VALUE(NEW.periodo, NEW.fechaLectura, NEW.lectura, NEW.Cuenta_idCuenta, USER(), 'INSERT');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LAS MEDICIONES QUE SE ELIMENEN EN MEDICIONES
DELIMITER $$
CREATE TRIGGER mediciones_delete BEFORE DELETE ON mediciones FOR EACH ROW
BEGIN
	INSERT INTO Mediciones_log(periodo, fechaLectura, lectura, Cuenta_idCuenta, usuario, operacion) VALUE(OLD.periodo, OLD.fechaLectura, OLD.lectura, OLD.Cuenta_idCuenta, USER(), 'DELETE');
END;
$$ DELIMITER ;

-- ----------------------------ConceptoxCuenta----------------------------

CREATE TABLE `tpi`.`ConceptoxCuenta_log` (
  `idLog` INT NOT NULL AUTO_INCREMENT,
  `Cuenta_idCuenta` INT NOT NULL,
  `Concepto_idConcepto` INT NOT NULL,
  `Valor` FLOAT NOT NULL,
  `usuario` VARCHAR(200) NOT NULL,
  `operacion` VARCHAR(50) NOT NULL,
  `fechaRealizacion` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`idLog`));

-- CREAMOS UN TRIGGER PARA LAS ACTUALIZACIONES QUE SE REALICEN EN ConceptoxCuenta
DELIMITER $$
CREATE TRIGGER ConceptoxCuenta_update BEFORE UPDATE ON ConceptoxCuenta FOR EACH ROW
BEGIN
	INSERT INTO ConceptoxCuenta_log(Cuenta_idCuenta, Concepto_idConcepto, Valor, usuario, operacion) VALUE(OLD.Cuenta_idCuenta, OLD.Concepto_idConcepto, OLD.Valor, USER(), 'UPDATE BEFORE');
	INSERT INTO ConceptoxCuenta_log(Cuenta_idCuenta, Concepto_idConcepto, Valor, usuario, operacion) VALUE(NEW.Cuenta_idCuenta, NEW.Concepto_idConcepto, NEW.Valor, USER(), 'UPDATE AFTER');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS NUEVOS ConceptoxCuenta QUE SE INSERTEN EN ConceptoxCuenta
DELIMITER $$
CREATE TRIGGER ConceptoxCuenta_insert AFTER INSERT ON ConceptoxCuenta FOR EACH ROW
BEGIN
	INSERT INTO ConceptoxCuenta_log(Cuenta_idCuenta, Concepto_idConcepto, Valor, usuario, operacion) VALUE(NEW.Cuenta_idCuenta, NEW.Concepto_idConcepto, NEW.Valor, USER(), 'INSERT');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS ConceptoxCuenta QUE SE ELIMENEN EN ConceptoxCuenta
DELIMITER $$
CREATE TRIGGER ConceptoxCuenta_delete BEFORE DELETE ON ConceptoxCuenta FOR EACH ROW
BEGIN
	INSERT INTO ConceptoxCuenta_log(Cuenta_idCuenta, Concepto_idConcepto, Valor, usuario, operacion) VALUE(OLD.Cuenta_idCuenta, OLD.Concepto_idConcepto, OLD.Valor, USER(), 'DELETE');
END;
$$ DELIMITER ;

-- --------------------------------------------------------


DELIMITER $$
CREATE TRIGGER costo_insert AFTER INSERT ON Costo FOR EACH ROW
BEGIN
  INSERT INTO Costo_log(idCosto, mtsDesde, mtsHasta, valorMetro, usuario, operacion) 
  VALUES (NEW.idCosto, NEW.mtsDesde, NEW.mtsHasta, NEW.valorMetro, USER(), 'INSERT');
END;
$$ DELIMITER ;


DELIMITER $$
CREATE TRIGGER costo_update BEFORE UPDATE ON Costo FOR EACH ROW
BEGIN
  INSERT INTO Costo_log(idCosto, mtsDesde, mtsHasta, valorMetro, usuario, operacion) 
  VALUES (OLD.idCosto, OLD.mtsDesde, OLD.mtsHasta, OLD.valorMetro, USER(), 'UPDATE BEFORE');
  INSERT INTO Costo_log(idCosto, mtsDesde, mtsHasta, valorMetro, usuario, operacion) 
  VALUES (NEW.idCosto, NEW.mtsDesde, NEW.mtsHasta, NEW.valorMetro, USER(), 'UPDATE AFTER');
END;
$$ DELIMITER ;


DELIMITER $$
CREATE TRIGGER costo_delete BEFORE DELETE ON Costo FOR EACH ROW
BEGIN
  INSERT INTO Costo_log(idCosto, mtsDesde, mtsHasta, valorMetro, usuario, operacion)
  VALUES (OLD.idCosto, OLD.mtsDesde, OLD.mtsHasta, OLD.valorMetro, USER(), 'DELETE');
END;
$$ DELIMITER ;




DELIMITER $$
CREATE TRIGGER factura_detalle_delete BEFORE DELETE ON FacturaDetalle FOR EACH ROW
BEGIN
  INSERT INTO FacturaDetalle_log(idRenglon, costoUnitario, Cuenta_has_Concepto_Cuenta_idCuenta, Cuenta_has_Concepto_Concepto_idConcepto, idFactura, usuario, operacion)
  VALUES (OLD.idRenglon, OLD.costoUnitario, OLD.Cuenta_has_Concepto_Cuenta_idCuenta, OLD.Cuenta_has_Concepto_Concepto_idConcepto, OLD.idFactura, USER(), 'DELETE');
END;
$$ DELIMITER ;

DELIMITER $$
CREATE TRIGGER factura_detalle_insert AFTER INSERT ON FacturaDetalle FOR EACH ROW
BEGIN
  INSERT INTO FacturaDetalle_log(idRenglon, costoUnitario, Cuenta_has_Concepto_Cuenta_idCuenta, Cuenta_has_Concepto_Concepto_idConcepto, idFactura, usuario, operacion)
  VALUES (NEW.idRenglon, NEW.costoUnitario, NEW.Cuenta_has_Concepto_Cuenta_idCuenta, NEW.Cuenta_has_Concepto_Concepto_idConcepto, NEW.idFactura, USER(), 'INSERT');
END;
$$ DELIMITER ;

DELIMITER $$
CREATE TRIGGER factura_detalle_update BEFORE UPDATE ON FacturaDetalle FOR EACH ROW
BEGIN
  INSERT INTO FacturaDetalle_log(idRenglon, costoUnitario, Cuenta_has_Concepto_Cuenta_idCuenta, Cuenta_has_Concepto_Concepto_idConcepto, idFactura, usuario, operacion)
  VALUES (OLD.idRenglon, OLD.costoUnitario, OLD.Cuenta_has_Concepto_Cuenta_idCuenta, OLD.Cuenta_has_Concepto_Concepto_idConcepto, OLD.idFactura, USER(), 'UPDATE BEFORE');
  INSERT INTO FacturaDetalle_log(idRenglon, costoUnitario, Cuenta_has_Concepto_Cuenta_idCuenta, Cuenta_has_Concepto_Concepto_idConcepto, idFactura, usuario, operacion)
  VALUES (NEW.idRenglon, NEW.costoUnitario, NEW.Cuenta_has_Concepto_Cuenta_idCuenta, NEW.Cuenta_has_Concepto_Concepto_idConcepto, NEW.idFactura, USER(), 'UPDATE AFTER');
END;
$$ DELIMITER ;


-- ----------------------------USUARIO----------------------------

-- CREAMOS UN TRIGGER PARA LAS ACTUALIZACIONES QUE SE REALICEN EN USUARIO
DELIMITER $$
CREATE TRIGGER usuario_update BEFORE UPDATE ON usuario FOR EACH ROW
BEGIN
	INSERT INTO Usuario_log(idUsuario, nombreUsuario, fechaAlta, usuario, operacion) VALUES(OLD.idUsuario, OLD.nombreUsuario, OLD.fechaAlta, USER(),'UPDATE BEFORE');
	INSERT INTO Usuario_log(idUsuario, nombreUsuario, fechaAlta, usuario, operacion) VALUES(NEW.idUsuario, NEW.nombreUsuario, OLD.fechaAlta, USER(),'UPDATE AFTER');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS NUEVOS USUARIOS QUE SE INSERTEN EN USUARIO
DELIMITER $$
CREATE TRIGGER usuario_insert AFTER INSERT ON usuario FOR EACH ROW
BEGIN
	INSERT INTO Usuario_log(idUsuario, nombreUsuario, fechaAlta, usuario, operacion) VALUES(NEW.idUsuario, NEW.nombreUsuario, OLD.fechaAlta, USER(),'INSERT');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS USUARIOS QUE SE ELIMENEN EN USUARIO
DELIMITER $$
CREATE TRIGGER usuario_delete BEFORE DELETE ON usuario FOR EACH ROW
BEGIN
	INSERT INTO Usuario_log(idUsuario, nombreUsuario, fechaAlta, usuario, operacion) VALUES(NEW.idUsuario, NEW.nombreUsuario, OLD.fechaAlta, USER(),'DELETE');
END;
$$ DELIMITER ;

--- ----------------------------MEDIDOR----------------------------

-- CREAMOS UN TRIGGER PARA LAS ACTUALIZACIONES QUE SE REALICEN EN MEDIDOR
DELIMITER $$
CREATE TRIGGER medidor_update BEFORE UPDATE ON medidor FOR EACH ROW
BEGIN
	INSERT INTO Medidor_log(idMedidor, numeroMedidor, modeloMedidor, usuario, operacion) VALUES(OLD.idMedidor, OLD.numeroMedidor, OLD.modeloMedidor, USER(),'UPDATE BEFORE');
	INSERT INTO Medidor_log(idMedidor, numeroMedidor, modeloMedidor, usuario, operacion) VALUES(NEW.idMedidor, NEW.numeroMedidor, OLD.modeloMedidor, USER(),'UPDATE AFTER');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS NUEVOS MEDIDORES QUE SE INSERTEN EN MEDIDOR
DELIMITER $$
CREATE TRIGGER medidor_insert AFTER INSERT ON medidor FOR EACH ROW
BEGIN
	INSERT INTO Medidor_log(idMedidor, numeroMedidor, modeloMedidor, usuario, operacion) VALUES(NEW.idMedidor, NEW.numeroMedidor, OLD.modeloMedidor, USER(),'INSERT');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LOS MEDIDORES QUE SE ELIMENEN EN MEDIDOR
DELIMITER $$
CREATE TRIGGER medidor_delete BEFORE DELETE ON medidor FOR EACH ROW
BEGIN
	INSERT INTO Medidor_log(idMedidor, numeroMedidor, modeloMedidor, usuario, operacion) VALUES(NEW.idMedidor, NEW.numeroMedidor, OLD.modeloMedidor, USER(),'DELETE');
END;
$$ DELIMITER ;

--- ----------------------------CUENTA----------------------------

-- CREAMOS UN TRIGGER PARA LAS ACTUALIZACIONES QUE SE REALICEN EN CUENTA
DELIMITER $$
CREATE TRIGGER cuenta_update BEFORE UPDATE ON cuenta FOR EACH ROW
BEGIN
	INSERT INTO Cuenta_log(idCuentaLog, fechaAlta, fechaBaja, Usuario_idUsuario, Medidor_idMedidor, usuario, operacion) VALUES(OLD.idCuentaLog, OLD.fechaAlta, OLD.fechaBaja, OLD.Usuario_idUsuario, OLD.Medidor_idMedidor, USER(),'UPDATE BEFORE');
	INSERT INTO Cuenta_log(idCuentaLog, fechaAlta, fechaBaja, Usuario_idUsuario, Medidor_idMedidor, usuario, operacion) VALUES(OLD.idCuentaLog, OLD.fechaAlta, OLD.fechaBaja, OLD.Usuario_idUsuario, OLD.Medidor_idMedidor, USER(),'UPDATE AFTER');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LAS NUEVOS CUENTAS QUE SE INSERTEN EN CUENTA
DELIMITER $$
CREATE TRIGGER cuenta_insert AFTER INSERT ON cuenta FOR EACH ROW
BEGIN
	INSERT INTO Cuenta_log(idCuentaLog, fechaAlta, fechaBaja, Usuario_idUsuario, Medidor_idMedidor, usuario, operacion) VALUES(OLD.idCuentaLog, OLD.fechaAlta, OLD.fechaBaja, OLD.Usuario_idUsuario, OLD.Medidor_idMedidor, USER(),'INSERT');
END;
$$ DELIMITER ;

-- CREAMOS UN TRIGGER PARA LAS CUENTAS QUE SE ELIMENEN EN CUENTA
DELIMITER $$

CREATE TRIGGER cuenta_delete BEFORE DELETE ON cuenta FOR EACH ROW
BEGIN
	INSERT INTO Cuenta_log(idCuentaLog, fechaAlta, fechaBaja, Usuario_idUsuario, Medidor_idMedidor, usuario, operacion) VALUES(OLD.idCuentaLog, OLD.fechaAlta, OLD.fechaBaja, OLD.Usuario_idUsuario, OLD.Medidor_idMedidor, USER(),'DELETE');
END;
$$ DELIMITER ;
